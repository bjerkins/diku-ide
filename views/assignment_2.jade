extends layout

block content

  #assignment_two
    h2 Assignment 2

    h3 1. Two visualizations

    h4 Box-plot made from scratch

    #boxplot

    h4 Radar chart

    p The following is a Radar Chart showing the same dataset as in the visualization from above.
    
    #radar-chart

    .row
      .col-md-6
        p Here on the right you can multi-pick years that you want to compare together.
      .col-md-6
        select(id="year-picker" class="form-control" multiple)

    p Source of visualization: #[a(href="http://bl.ocks.org/nbremer/6506614") D3.js - Radar Chart or Spider Chart - Adjusted from radar-chart-d3]


    h3 2. Motivation, method, results/discussion and conclusions.

    p The dataset that we picked to illustrate includes the recorded temperatures for Thessaloniki city in Greece. The dataset that we chose was based on the visualizations that we chose. At first we picked a city that had minus zero temperatures, but we came across problems with the visualization causing the radar chart to not show data correctly.  

    p As it can be observed from the Box-plot visualization, on one hand, through out the past 100 years, the maximum temperature can increased, starting from 25° in 1905 and reaching up to 30° in 2012. 

    p On the other hand, it is visible that the average temperature remained relatively the same (14-16°), along with the minimum temperature. In addition we can see a pattern regarding the minimum temperature. It can be observed that there is a certain "circle" of temperature recordings that repeats every few years. 

    p As a result, the minimum temperature keeps going up and down again at around the same levels as a few years back. However, as the years pass the deviations become smaller and less noticeable.

    p The same can be observed from the Radar chart, although, in this case we can have a more detailed view of the months for each year. Generally, there is a heart shape if we click various years, because January and February usually have the lowest temperatures. However, as the years pass we see that the shape gradually evens out to become a circle, because these months start having higher temperatures. But we mentioned before the temperature "cycle" can also be observed here, thus making the heart shape in the last 20 years reappear.

    h3 3. Individual parts

    h4 3.1 (Bjarki)

    p Visualizing the change in the temperature is a good start to get a feeling of how the weather has been changing. However, in places like Iceland where the warmest average temperature is 11° degrees, the amount of degrees don't tell the whole story. The difference between the "feels like" temperature and the actual is usually a bit higher when compared to Denmark, for example, due to the low humidity in Iceland. A warm and sunny day can be a little as 16° and it would feel like 20-22° here in Denmark. The wind has also a lot to do with it as well as the amount of precipitation. Therefore, a nice visualization would include these metrics (wind, precipitation, humidity and feels-like) and display them perhaps in a multi-dimensional (one dimension pr year) line-plot to get a better overview of the changing weather. Most often, we are interested in comparing season to season, so the interactivity would allow skimming through the seasons year by year. Below is a mock-up sketch of the idea. Note that I'm only showing one of the data dimension (the temperature, for example). 

    img(src= "/images/graph_sketch.png", class="mock-up")    
    
    h4 3.2 (Thomas)

    p I will focus on the box-plot visualization for this section - because that is the static one and made from scratch.

    p It is not hard to see that with a hundred+ years, the visualization is very cluttered; having a box for each year. We could have added a "group" function where the user could choose the number of boxes. Say, we have 100 years, the user chooses 10 boxes, then we would average the values from year 0 to 9 in the first box, year 10 to 19 in the second, and so forth. 

    p Another similar approach (to reduce cluttering) would be to add a time line slider below the chart - e.g. like the one found here: #[a(href="http://bl.ocks.org/DStruths/9c042e3a6b66048b5bd4") D3 chart with interactive time line slider].

    p Lastly, we could add simple, yet very informative, legends on hover. E.g., such that the user can hover over a box and see the data representing that box. As the visualization is now, you almost need a ruler glued to your screen to read the values from a box.

    p Mock-up of this feature (disclaimer: made in MS paint): 

    img(src= "/images/image_02.png", class="mock-up")

    h4 3.3 (Sokratis)

    p Generally D3.js cannot work efficiently with large amounts of data. For example, loading 100MB of data all at once in the browser can be very slow because of the DOM manipulations. In addition, layout algorithms are very heavy to run. In general, force layout algorithms take cubic time to finish. (Source: #[a(href="https://www.quora.com/Does-D3-js-work-efficiently-on-massive-amounts-of-data-200-million-rows-with-at-least-a-dozen-columns") www.quora.com])

    p As a result, if we are to show a large dataset, we need to break it up in smaller pieces by bringing more levels of abstraction (i.e. Radar Chart). A type of visualization that this method excludes is the #[a(href="http://www.wikiwand.com/en/Force-directed_graph_drawing") Force-directed graph drawing], which includes many algorithms for drawing graphs, because we need the whole dataset to have a correct presentation.

    p An example of a big data visualization is illustrated #[a(href="http://www.datasciencecentral.com/profiles/blogs/bigquery-big-data-visualization-with-d3-js") this]. As we can see, the dataset is from New York Taxi and it is over 4GB. As it is explained, we can use Google's BigQuery to run aggregate queries directly on the dataset. Then, we can use the JavaScript client library to query for the dataset on the fly.

    p Another example of big data visualization is the #[a(href="https://hurricanesandy.censusviewer.com/client") Hurricane Sandy visualization]. In this visualization, we can observe the recorded population in United States before, during and after the hurricane Sandy. As we can see the dataset that is used is quite large. In order to deal with this, there are certain levels of abstraction. We can filter the data that we are presented by filtering by age, gender, race, etc. or even by time (120 Hour Cone of Uncertainty Day 10, etc.). This way the visualization is easy to load and read.

    p Another way, to visualize big data is by first filtering it, so we can reduce their size. However, in this way the final result becomes less accurate than using the original dataset.

    p In this assignment we could reduce the size of the data by taking a mean over some years (5-10), this way we could have less data to load. In our case, taking the mean over 5-6 years, would give us a more clear view of the minimum temperature that was discussed above.

  //- load script
  script(src='/javascripts/assignment_2/assignment_2.js')
  script(src='/javascripts/assignment_2/radar-chart.js')